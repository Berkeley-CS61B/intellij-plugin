<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration for CS61B.  Modified from sun_checks.xml, which checks the
  sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  For information on configuration, see http://checkstyle.sf.net.

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
  <!--
      If you set the basedir property below, then all reported file
      names will be relative to the specified directory. See
      http://checkstyle.sourceforge.net/5.x/config.html#Checker

      <property name="basedir" value="${basedir}"/>
  -->
  <property name="basedir" value="${user.dir}"/>

  <module name="SuppressionFilter">
    <property name="file" value="${checkstyle.suppress.file}"/>
  </module>

  <!-- Checks whether files end with a new line.                        -->
  <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf_cr_crlf"/>
  </module>

  <!-- Checks that property files contain the same keys.         -->
  <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
  <module name="Translation"/>

  <!-- Checks for Size Violations.                    -->
  <!-- See http://checkstyle.sf.net/config_sizes.html -->
  <module name="FileLength">
    <property name="max" value="2000"/>
  </module>

  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter"/>

  <!-- Miscellaneous other checks.                   -->
  <!-- See http://checkstyle.sf.net/config_misc.html -->
  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="minimum" value="0"/>
    <property name="maximum" value="0"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <module name="TreeWalker">

    <!-- Checks for Javadoc comments.                     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <!-- and docs/config_javadoc.txt in the CS61B version.-->
    <module name="ucb.checkstyle.checks.JavadocMethod61b">
      <property name="allowUndeclaredRTE" value="true"/>
      <property name="allowNarrativeParamTags" value="true"/>
      <property name="allowNarrativeReturnTags" value="true"/>
      <property name="unusedParamFormat"
                value="^(dummy|ignored|unused).*$"/>
      <!--For now:-->
      <property name="allowMissingThrowsTags" value="true"/>
    </module>
    <module name="ucb.checkstyle.checks.JavadocType61b">
      <property name="authorFormat" value="^\s*\w[-\w\s.]+"/>
      <property name="allowMissingParamTags" value="true"/>
    </module>
    <module name="ucb.checkstyle.checks.JavadocVariable61b"/>
    <module name="JavadocStyle"/>


    <!-- Checks for Naming Conventions.                  -->
    <!-- See http://checkstyle.sf.net/config_naming.html -->
    <module name="ConstantName">
      <message key="name.invalidPattern"
               value="Constant ''{0}'' must be in all capitals." />
    </module>
    <module name="LocalFinalVariableName">
      <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
      <message key="name.invalidPattern"
               value="Local final variable ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter." />
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
      <message key="name.invalidPattern"
               value="Local variable ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter." />
    </module>
    <module name="MemberName">
      <property name="format" value="^_?[a-z][a-zA-Z0-9]*$|_[A-Z]$"/>
      <message key="name.invalidPattern"
               value="Instance variable ''{0}'' must start with either a lower-case letter or '_'."/>
    </module>
    <module name="MethodName">
      <message key="name.invalidPattern"
               value="Method name ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter." />
    </module>
    <module name="PackageName">
      <property name="format"
                value="^[a-z][a-z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
      <message key="name.invalidPattern"
               value="Package name ''{0}'' must start with a lower-case letter."/>
    </module>
    <module name="ParameterName">
      <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
      <message key="name.invalidPattern"
               value="Parameter ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter followed by 0 or more digits." />
    </module>
    <module name="StaticVariableName">
      <property name="format" value="^_?[a-z][a-zA-Z0-9]*$|_[A-Z]$"/>
      <message key="name.invalidPattern"
               value="Static variable ''{0}'' must start with either a lower-case letter or '_'." />
    </module>
    <module name="TypeName">
      <message key="name.invalidPattern"
               value="Type (class) name ''{0}'' must start with a capital letter."/>
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="^[A-Z][A-Za-z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Type parameter ''{0}'' must start with a capital letter."/>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="^[A-Z][A-Za-z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Type parameter ''{0}'' must start with a capital letter."/>
    </module>


    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!-- <module name="Header">                            -->
    <!-- The follow property value demonstrates the ability     -->
    <!-- to have access to ANT properties. In this case it uses -->
    <!-- the ${basedir} property to allow Checkstyle to be run  -->
    <!-- from any directory within a project. See property      -->
    <!-- expansion,                                             -->
    <!-- http://checkstyle.sf.net/config.html#properties        -->
    <!-- <property                                              -->
    <!--     name="headerFile"                                  -->
    <!--     value="${basedir}/java.header"/>                   -->
    <!-- </module> -->

    <!-- Following interprets the header file as regular expressions. -->
    <!-- <module name="RegexpHeader"/>                                -->


    <!-- Checks for imports                              -->
    <!-- See http://checkstyle.sf.net/config_import.html -->
    <module name="AvoidStarImport">
      <property name="excludes"
                value="java.lang.Math,org.junit.Assert,java.lang.Double"/>
      <property name="allowStaticMemberImports" value="true"/>
    </module>
    <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>


    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="LineLength">
      <property name="max" value="80"/>
    </module>

    <module name="MethodLength">
      <property name="max" value="60"/>
    </module>
    <module name="ParameterNumber">
      <property name="max" value="8"/>
    </module>

    <module name="OuterTypeNumber">
      <property name="max" value="1"/>
    </module>


    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad">
      <property name="allowLineBreaks" value="true"/>
    </module>
    <module name="NoWhitespaceAfter">
      <property name="tokens"
                value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
    </module>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>

    <module name="TrailingComment">
      <property name="format" value="^\s*$"/>
    </module>

    <module name="ucb.checkstyle.checks.InternalComments">
      <property name="allowedCppFormats" value=""/>
      <property name="allowedCFormats"
                value="package class func init prestmts stmts @/\*(?i)\s*(fall\s*through\.?|ignore\s*\w+\.?|no\s+action)\s*\*/\s*@"/>
    </module>

    <!-- Modifier Checks                                    -->
    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>


    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See http://checkstyle.sf.net/config_blocks.html -->
    <module name="EmptyBlock">
      <property name="option" value="stmt"/>
      <property name="tokens" value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,INSTANCE_INIT,STATIC_INIT"/>
    </module>
    <module name="EmptyBlock">
      <property name="option" value="text"/>
      <property name="tokens" value="LITERAL_CATCH,LITERAL_WHILE"/>
    </module>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>


    <!-- Checks for common coding problems               -->
    <!-- See http://checkstyle.sf.net/config_coding.html -->
    <!-- <module name="AvoidInlineConditionals"/> -->
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="HiddenField"/>
    <module name="ucb.checkstyle.checks.InnerAssignment61b">
      <property name="allowedContext"
                value="ASSIGN,RESOURCE"/>
    </module>
    <module name="ucb.checkstyle.checks.MagicNumber61b">
      <property name="ignoreNumbers"
                value="-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 32, 64, 100, 1000, 0.5, -0.5, 0.25, -0.25"/>
    </module>
    <module name="MissingSwitchDefault"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>

    <module name="StringLiteralEquality"/>
    <module name="IllegalCatch"/>
    <module name="FallThrough"/>

    <!-- Checks for class design                         -->
    <!-- See http://checkstyle.sf.net/config_design.html -->
    <!-- <module name="DesignForExtension"/> -->
    <!-- <module name="FinalClass"/> -->
    <!-- <module name="HideUtilityClassConstructor"/> -->
    <module name="InterfaceIsType"/>
    <module name="VisibilityModifier">
      <property name="protectedAllowed" value="true"/>
    </module>

    <!-- It seems that most editors that our students use treat tabs as
         4 blanks.   Of course, this common choice is completely idiotic.
         It also has the effect of amplifying the error of including
         tab characters in the source by causing many indentation errors,
         unless we treat tabs as 4 blanks. True, as a result,
         people whose editors correctly treat tabs as 8 characters get
         many errors if they leave tabs in their files, but let us hope
         that since they chose proper editors, they are also sensible
         enough NOT to use tab characters in their source files.-->
    <property name="tabWidth" value="4"/>

    <!-- indentation checks                           -->
    <module name="Indentation">
      <property name="basicOffset" value="4"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="0"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="ArrayTypeStyle"/>
    <module name="TodoComment"/>
    <module name="UpperEll"/>

  </module>

</module>